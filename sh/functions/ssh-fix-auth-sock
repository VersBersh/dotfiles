# When reattaching to a screen or tmux session the SSH_AUTH_SOCK environment
# variable in existing shells will typically be incorrect as it will point to
# the SSH agent socket at the time each shell was initially created. If we're
# reattaching in a new SSH session then the SSH agent socket path will have
# changed. While tmux is smart enough to update the environment variable in
# newly created shells via its update-environment option it can't update the
# variable in existing shells.
#
# This function helps to handle this situation by updating the SSH_AUTH_SOCK
# variable to point to the most recently created SSH agent socket for the user.
# If it detects we're running inside a screen or tmux session it also updates
# the session multiplexer environment so that future shells inherit the correct
# environment variable.
#
# Note that we do not (can not?) update the SSH_AUTH_SOCK environment variable
# for already spawned shells outside of the one we're currently executing in.

function ssh-fix-auth-sock {
    uid=$(id -u)
    ssh_agents=$(find /tmp -maxdepth 2 -type s -uid $uid -name 'agent.*' \
                           -printf '%T+ %p\n' 2> /dev/null)

    if [ -z "$ssh_agents" ]; then
        echo "Unable to locate any available SSH agents."
    else
        best_agent=$(echo $ssh_agents | sort -r | head -n 1 | cut -d' ' -f2)
        if [ "$SSH_AUTH_SOCK" != "$best_agent" ]; then
            export SSH_AUTH_SOCK=$best_agent
            if [ -n "$TMUX" ]; then
                tmux setenv SSH_AUTH_SOCK $best_agent
            fi
            if [ -n "$STY" ]; then
                screen setenv SSH_AUTH_SOCK $best_agent
            fi
            echo "Updated \$SSH_AUTH_SOCK to: $best_agent"
        else
            echo "\$SSH_AUTH_SOCK already set to best SSH agent."
        fi
    fi
}

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
