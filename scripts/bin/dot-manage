#!/usr/bin/env bash

# Quick script to handle installing/uninstalling relevant dotfiles components

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o pipefail         # Exit on failures earlier in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

META_DIR=metadata
STOW_BIN=stow/bin/stow

function script_init() {
    # Determine some important paths
    orig_dir="$PWD"
    script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
    dotfiles_dir="$(cd "$script_dir"; git rev-parse --show-toplevel)"
    dotfiles_name="$(basename "$dotfiles_dir")"

    # Source in common metadata functions
    source "$dotfiles_dir/$META_DIR/templates/common.sh"
}


function script_usage() {
    echo 'Usage:
    -h|--help                   Displays this help

    Stow Options:
    -i|--install                Installs all detected applicable components
    -u|--uninstall              Uninstalls all detected applicable components
    -r|--reinstall              Equivalent to an uninstall and reinstall. This
                                is the default option and is recommended as it
                                will prune any obsolete symlinks.

    Detection Options:
    -do|--detection-only        Only run component detection but make no
                                changes. This is typically only useful in
                                conjunction with the detection report function.
    -dr|--detection-report      Displays a report of the detection results'
}


function parse_params() {
    if [[ $# -eq 0 ]]; then
        do_reinstall=true
    else
        while [[ $# -gt 0 ]]; do
            param="$1"
            shift
            case $param in
                -h|--help)
                    script_usage
                    exit 0
                    ;;
                -i|--install)
                    do_install=true
                    ;;
                -r|--reinstall)
                    do_reinstall=true
                    ;;
                -u|--uninstall)
                    do_uninstall=true
                    ;;
                -do|--detection-only)
                    do_detection_only=true
                    ;;
                -dr|--detection-report)
                    do_detection_report=true
                    ;;
                *)
                    echo "Invalid parameter was provided: $param"
                    exit 1
            esac
        done

        if [[ -z $do_install && -z $do_uninstall ]]; then
          do_reinstall=true
        fi
    fi
}


function detect_components() {
    cd "$dotfiles_dir"
    stow_list=()
    detect_success=()
    detect_failure=()
    detect_ignore=()
    detect_always_install=()
    detect_never_install=()
    detect_not_available=()
    detect_no_logic=()
    comp_list="$(find "$dotfiles_dir" -maxdepth 1 -type d \
                                      ! -name "$dotfiles_name" -and \
                                      ! -name ".git")"

    for comp_path in $comp_list; do
        comp_name="$(basename "$comp_path")"
        if [[ -x $META_DIR/$comp_name.sh ]]; then
            if "$META_DIR/$comp_name.sh"; then
                stow_list+=("$comp_name")
                detect_success+=("$comp_name")
            else
                detect_status=$?
                if [[ $detect_status -eq $DETECTION_IGNORE ]]; then
                    detect_ignore+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_ALWAYS_INSTALL ]]; then
                    stow_list+=("$comp_name")
                    detect_always_install+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_NEVER_INSTALL ]]; then
                    detect_never_install+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_NOT_AVAILABLE ]]; then
                    detect_not_available+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_NO_LOGIC ]]; then
                    detect_no_logic+=("$comp_name")
                else
                    detect_failure+=("$comp_name")
                fi
            fi
        else
            if command -v "$comp_name" > /dev/null; then
                stow_list+=("$comp_name")
                detect_success+=("$comp_name")
            else
                detect_not_available+=("$comp_name")
            fi
        fi
    done

}


function detect_report() {
    echo -ne "Detected:\t\t"
    if [[ -n ${detect_success[*]} ]]; then
        detect_success="$(detect_report_format "${detect_success[@]}")"
        echo -e "\e[32m$detect_success\e[39m"
    else
        echo -e "\e[36mNone\e[39m"
    fi

    echo -ne "Always Install:\t\t"
    if [[ -n ${detect_always_install[*]} ]]; then
        detect_always_install="$(detect_report_format "${detect_always_install[@]}")"
        echo -e "\e[32m$detect_always_install\e[39m"
    else
        echo -e "\e[36mNone\e[39m"
    fi

    echo -ne "Never Install:\t\t"
    if [[ -n ${detect_never_install[*]} ]]; then
        detect_never_install="$(detect_report_format "${detect_never_install[@]}")"
        echo -e "\e[32m$detect_never_install\e[39m"
    else
        echo -e "\e[36mNone\e[39m"
    fi

    echo -ne "Not Available:\t\t"
    if [[ -n ${detect_not_available[*]} ]]; then
        detect_not_available="$(detect_report_format "${detect_not_available[@]}")"
        echo -e "\e[32m$detect_not_available\e[39m"
    else
        echo -e "\e[36mNone\e[39m"
    fi

    echo -ne "Detection Ignored:\t"
    if [[ -n ${detect_ignore[*]} ]]; then
        detect_ignore="$(detect_report_format "${detect_ignore[@]}")"
        echo -e "\e[32m$detect_ignore\e[39m"
    else
        echo -e "\e[36mNone\e[39m"
    fi

    echo -ne "No Detection Logic:\t"
    if [[ -n ${detect_no_logic[*]} ]]; then
        detect_no_logic="$(detect_report_format "${detect_no_logic[@]}")"
        echo -e "\e[33m$detect_no_logic\e[39m"
    else
        echo -e "\e[32mNone\e[39m"
    fi

    echo -ne "Detection Failure:\t"
    if [[ -n ${detect_failure[*]} ]]; then
        detect_failure="$(detect_report_format "${detect_failure[@]}")"
        echo -e "\e[31m$detect_failure\e[39m"
    else
        echo -e "\e[32mNone\e[39m"
    fi
}


function detect_report_format() {
    echo "$@" | xargs -n1 | sort | xargs
}


function stow_components() {
    cd "$dotfiles_dir"
    stow_success=()
    stow_failure=()

    for stow_comp in "${stow_list[@]}"; do
        if "$STOW_BIN" "$1" "$stow_comp" 2> /dev/null; then
            stow_success+=("$stow_comp")
        elif [[ $? -eq 1 ]]; then
            stow_failure+=("$stow_comp")
        fi
    done

    if [[ -n ${stow_failure[*]} ]]; then
        stow_failure="$(echo "${stow_failure[@]}" | xargs -n1 | sort | xargs)"
        echo -e "Stow Failed: \t\t\e[31m$stow_failure\e[39m"
    fi
    if [[ -n ${stow_success[*]} ]]; then
        stow_success="$(echo "${stow_success[@]}" | xargs -n1 | sort | xargs)"
        echo -e "Stow Succeeded: \t\e[32m$stow_success\e[39m"
    fi
}


script_init
parse_params "$@"

echo '*** Detecting applicable dotfiles components...'
detect_components
if [[ -n $do_detection_report ]]; then
    detect_report
fi
if [[ -n $do_detection_only ]]; then
    exit
fi

if [[ -n $do_reinstall || (-n $do_install && $do_uninstall) ]]; then
    echo '*** Reinstalling all dotfiles components...'
    stow_components -R
elif [[ -n $do_install ]]; then
    echo '*** Installing all dotfiles components...'
    stow_components -S
elif [[ -n $do_uninstall ]]; then
    echo '*** Uninstalling all dotfiles components...'
    stow_components -D
fi

cd "$orig_dir"

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
