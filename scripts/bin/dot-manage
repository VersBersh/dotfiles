#!/usr/bin/env bash

# Quick script to handle installing/uninstalling relevant dotfiles components

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
#set -o nounset         # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# Path to the metadata directory relative to the dotfiles directory
META_DIR=metadata
# Path to the stow executable relative to the dotfiles directory
STOW_BIN=stow/bin/stow

# DESC: Usage help
# ARGS: None
function script_usage() {
    cat << EOF
Usage:
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
    -nc|--no-colour             Disables colour output

    Stow Options:
     -i|--install               Installs all detected applicable components
     -u|--uninstall             Uninstalls all detected applicable components
     -r|--reinstall             Equivalent to an uninstall and reinstall. This
                                is the default option and is recommended as it
                                will prune any obsolete symlinks.

    Detection Options:
    -do|--detection-only        Only run component detection but make no
                                changes. This is typically only useful in
                                conjunction with the detection report function.
    -dr|--detection-report      Displays a report of the detection results
EOF
}


# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
function parse_params() {
    local param

    if [[ $# -eq 0 ]]; then
        do_reinstall=true
    else
        while [[ $# -gt 0 ]]; do
            param="$1"
            shift
            case $param in
                -h|--help)
                    script_usage
                    exit 0
                    ;;
                -v|--verbose)
                    verbose="true"
                    ;;
                -nc|--no-colour)
                    no_colour="true"
                    ;;
                -i|--install)
                    do_install="true"
                    ;;
                -r|--reinstall)
                    do_reinstall="true"
                    ;;
                -u|--uninstall)
                    do_uninstall="true"
                    ;;
                -do|--detection-only)
                    do_detection_only="true"
                    ;;
                -dr|--detection-report)
                    do_detection_report="true"
                    ;;
                *)
                    script_exit "Invalid parameter was provided: $param" 2
                    ;;
            esac
        done

        if [[ -z $do_install && -z $do_uninstall ]]; then
            do_reinstall=true
        fi
    fi
}


# DESC: Find some important paths we need before script_init() is called
# ARGS: None
function early_init() {
    # Determine the physical directory this script resides in. This approach is
    # necessarily clumsy as simple methods like "readlink -f" and "realpath"
    # are not platform independent. We have to work on Linux, BSD, OS X, etc...
    readonly script_real_path="$(perl -MCwd -le 'print Cwd::abs_path(shift)' \
                                 "${BASH_SOURCE[0]}")"
    readonly script_real_dir="$(dirname "$script_real_path")"
    readonly script_real_name="$(basename "$script_real_path")"

    # Dotfiles directory path & name
    readonly dotfiles_path="$(cd -P "$script_real_dir/../../" && pwd)"
    readonly dotfiles_name="$(basename "$dotfiles_path")"

    # Source in common metadata functions
    # shellcheck source=metadata/templates/common.sh
    source "$dotfiles_path/$META_DIR/templates/common.sh"
}


# DESC: Quick, simple & dirty sorting of arguments
# ARGS: $@ (required): Arguments to be sorted
function sort_args() {
    printf '%s ' "$@" | xargs -n 1 | sort | xargs
}


# DESC: Detect the status of each component
# ARGS: None
function detect_components() {
    pretty_print "*** Detecting applicable dotfiles components..."

    # TODO: comp_list should probably also be an array
    local comp_list comp_name comp_path detect_status
    declare -g -a stow_list
    declare -g -a detect_success detect_failure detect_ignore
    declare -g -a detect_always_install detect_never_install
    declare -g -a detect_not_available detect_no_logic

    comp_list="$(find "$dotfiles_path" -maxdepth 1 -type d \
                                      ! -name "$dotfiles_name" -and \
                                      ! -name ".git")"

    cd "$dotfiles_path"
    for comp_path in $comp_list; do
        comp_name="$(basename "$comp_path")"
        if [[ -x $META_DIR/$comp_name.sh ]]; then
            if "$META_DIR/$comp_name.sh"; then
                stow_list+=("$comp_name")
                detect_success+=("$comp_name")
            else
                detect_status=$?
                if [[ $detect_status -eq $DETECTION_ALWAYS_INSTALL ]]; then
                    stow_list+=("$comp_name")
                    detect_always_install+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_NEVER_INSTALL ]]; then
                    detect_never_install+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_NOT_AVAILABLE ]]; then
                    detect_not_available+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_NO_LOGIC ]]; then
                    detect_no_logic+=("$comp_name")
                elif [[ $detect_status -eq $DETECTION_IGNORE ]]; then
                    detect_ignore+=("$comp_name")
                else
                    detect_failure+=("$comp_name")
                fi
            fi
        elif command -v "$comp_name" > /dev/null; then
            stow_list+=("$comp_name")
            detect_success+=("$comp_name")
        else
            detect_not_available+=("$comp_name")
        fi
    done
}


# DESC: Output a report with the results of component detection
# ARGS: None
function detect_report() {
    local detection_result

    printf '%s\t\t' "Detected:"
    if [[ -n ${detect_success[*]} ]]; then
        detection_result="$(sort_args "${detect_success[@]}")"
        printf '%b%s%b\n' "$fg_green" "$detection_result" "$ta_none"
    else
        printf '%b%s%b\n' "$fg_cyan" "None" "$ta_none"
    fi

    printf '%s\t\t' "Always Install:"
    if [[ -n ${detect_always_install[*]} ]]; then
        detection_result="$(sort_args "${detect_always_install[@]}")"
        printf '%b%s%b\n' "$fg_green" "$detection_result" "$ta_none"
    else
        printf '%b%s%b\n' "$fg_cyan" "None" "$ta_none"
    fi

    printf '%s\t\t' "Never Install:"
    if [[ -n ${detect_never_install[*]} ]]; then
        detection_result="$(sort_args "${detect_never_install[@]}")"
        printf '%b%s%b\n' "$fg_green" "$detection_result" "$ta_none"
    else
        printf '%b%s%b\n' "$fg_cyan" "None" "$ta_none"
    fi

    printf '%s\t\t' "Not Available:"
    if [[ -n ${detect_not_available[*]} ]]; then
        detection_result="$(sort_args "${detect_not_available[@]}")"
        printf '%b%s%b\n' "$fg_green" "$detection_result" "$ta_none"
    else
        printf '%b%s%b\n' "$fg_cyan" "None" "$ta_none"
    fi

    printf '%s\t' "Detection Ignored:"
    if [[ -n ${detect_ignore[*]} ]]; then
        detection_result="$(sort_args "${detect_ignore[@]}")"
        printf '%b%s%b\n' "$fg_green" "$detection_result" "$ta_none"
    else
        printf '%b%s%b\n' "$fg_cyan" "None" "$ta_none"
    fi

    printf '%s\t' "No Detection Logic:"
    if [[ -n ${detect_no_logic[*]} ]]; then
        detection_result="$(sort_args "${detect_no_logic[@]}")"
        printf '%b%s%b\n' "$fg_yellow" "$detection_result" "$ta_none"
    else
        printf '%b%s%b\n' "$fg_green" "None" "$ta_none"
    fi

    printf '%s\t' "Detection Failure:"
    if [[ -n ${detect_failure[*]} ]]; then
        detection_result="$(sort_args "${detect_failure[@]}")"
        printf '%b%s%b\n' "$fg_red" "$detection_result" "$ta_none"
    else
        printf '%b%s%b\n' "$fg_green" "None" "$ta_none"
    fi
}


# DESC: Invokes the stow executable on detected components
# ARGS: $1 (required): The operation type (-S, -D or -R)
function stow_components() {
    local stow_comp stow_result
    declare -g -a stow_success stow_failure

    cd "$dotfiles_path"
    for stow_comp in "${stow_list[@]}"; do
        "$STOW_BIN" "$1" -d "$dotfiles_path" -t "$HOME" "$stow_comp"

        if [[ $? -eq 0 ]]; then
            stow_success+=("$stow_comp")
        else
            stow_failure+=("$stow_comp")
        fi
    done

    if [[ -n ${stow_failure[*]} ]]; then
        printf '%s\t\t' "Stow Failed:"
        stow_result="$(sort_args "${stow_failure[@]}")"
        printf '%b%s%b\n' "$fg_red" "$stow_result" "$ta_none"
    fi

    if [[ -n ${stow_success[*]} ]]; then
        printf '%s\t\t' "Stow Succeeded:"
        stow_result="$(sort_args "${stow_success[@]}")"
        printf '%b%s%b\n' "$fg_green" "$stow_result" "$ta_none"
    fi
}


# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
function main() {
    early_init

    # shellcheck source=scripts/bin/source.sh
    source "$script_real_dir/source.sh"

    trap "script_trap_err" ERR
    trap "script_trap_exit" EXIT

    script_init
    parse_params "$@"
    if [[ -z $no_colour ]]; then
        colour_init
    fi

    detect_components

    if [[ -n $do_detection_report ]]; then
        detect_report
    fi

    if [[ -n $do_detection_only ]]; then
        return
    fi

    if [[ -n $do_reinstall ]]; then
        pretty_print "*** Reinstalling all dotfiles components..."
        stow_components -R
    elif [[ -n $do_install ]]; then
        pretty_print "*** Installing all dotfiles components..."
        stow_components -S
    elif [[ -n $do_uninstall ]]; then
        pretty_print "*** Uninstalling all dotfiles components..."
        stow_components -D
    fi
}


# Stow all the things!
main "$@"

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
