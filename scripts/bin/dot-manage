#!/usr/bin/env bash

# Quick script to handle installing/uninstalling relevant dotfiles components

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o pipefail         # Exit on failures earlier in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

META_DIR=metadata
STOW_BIN=stow/bin/stow

function script_init() {
    orig_dir="$PWD"
    script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
    dotfiles_dir="$(cd "$script_dir"; git rev-parse --show-toplevel)"
    dotfiles_name="$(basename "$dotfiles_dir")"
}

function parse_params() {
    if [[ $# -eq 0 ]]; then
        do_reinstall=true
    else
        while [[ $# -gt 0 ]]; do
            param="$1"
            shift
            case $param in
                -h|--help)
                    echo 'Usage: [-h|--help] [-i|--install] [-r|--reinstall] [-u|--uninstall]'
                    exit 0
                    ;;
                -i|--install)
                    do_install=true
                    ;;
                -r|--reinstall)
                    do_reinstall=true
                    ;;
                -u|--uninstall)
                    do_uninstall=true
                    ;;
                *)
                    echo "Invalid parameter was provided: $param"
                    exit 1
            esac
        done
    fi
}

function detect_components() {
    cd "$dotfiles_dir"
    stow_list=()
    comp_nologic=()
    comp_unknown=()
    comp_list="$(find "$dotfiles_dir" -maxdepth 1 -type d \
                                      ! -name "$dotfiles_name" -and \
                                      ! -name ".git")"

    for comp_path in $comp_list; do
        comp_name="$(basename "$comp_path")"
        if [[ -x $META_DIR/$comp_name/detect.sh ]]; then
            if $META_DIR/$comp_name/detect.sh; then
                stow_list+=("$comp_name")
            elif [[ $? -eq 2 ]]; then
                comp_nologic+=("$comp_name ")
            else
                comp_unknown+=("$comp_name ")
            fi
        else
            if command -v "$comp_name" > /dev/null; then
                stow_list+=("$comp_name")
            fi
        fi
    done
}

function stow_components() {
    cd "$dotfiles_dir"
    stow_success=()
    stow_failure=()

    for stow_comp in "${stow_list[@]}"; do
        if $STOW_BIN $1 "$stow_comp" 2> /dev/null; then
            stow_success+="$stow_comp "
        elif [[ $? -eq 1 ]]; then
            stow_failure+="$stow_comp "
        fi
    done

    if [[ -n $comp_unknown ]]; then
        comp_unknown="$(echo "$comp_unknown" | xargs -n1 | sort -u | xargs)"
        echo -e "Detection failure: \t\e[35m$comp_unknown\e[39m"
    fi
    if [[ -n $comp_nologic ]]; then
        comp_nologic="$(echo "$comp_nologic" | xargs -n1 | sort -u | xargs)"
        echo -e "No detection logic: \t\e[33m$comp_nologic\e[39m"
    fi
    if [[ -n $stow_failure ]]; then
        stow_failure="$(echo "$stow_failure" | xargs -n1 | sort -u | xargs)"
        echo -e "Stow Failed: \t\t\e[31m$stow_failure\e[39m"
    fi
    if [[ -n $stow_success ]]; then
        stow_success="$(echo "$stow_success" | xargs -n1 | sort -u | xargs)"
        echo -e "Stow Succeeded: \t\e[32m$stow_success\e[39m"
    fi
}

script_init
parse_params $@

echo '*** Detecting applicable dotfiles components...'
detect_components

if [[ -n $do_reinstall || (-n $do_install && $do_uninstall) ]]; then
    echo '*** Reinstalling all dotfiles components...'
    stow_components -R
elif [[ -n $do_install ]]; then
    echo '*** Installing all dotfiles components...'
    stow_components -S
elif [[ -n $do_uninstall ]]; then
    echo '*** Uninstalling all dotfiles components...'
    stow_components -D
fi

cd "$orig_dir"

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
