#!/usr/bin/env bash

# Check for potentially incorrect file or group ownership within each user's
# home directory. This can happen quite easily when using sudo to perform
# configuration of a package which will be running under a particular user
# account. Note that an account being flagged by this function does *not*
# guarantee an issue, just that there *may* be one which should be verified.

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o pipefail         # Exit on failures earlier in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

function check_perms {
    user_home="$1"
    user_name="$(basename "$1")"
    user_uid=$(id -u "$user_name")
    user_gid=$(id -g "$user_name")
    echo -n "Checking permissions for $user_name... "
    find_results=$(sudo find "$user_home" -not -uid $user_uid -or -not -gid $user_gid 2>&1)
    find_status=$?
    if [[ $find_status -eq 0 && -z $find_results ]]; then
        echo 'ok'
    elif [[ $find_status -ne 0 ]]; then
        echo 'find returned non-zero exit status!'
    else
        echo -e "found potential issues:\n$find_results"
    fi
}

if ! sudo -v; then
    echo 'This script requires sudo access.'
    exit 1
fi

check_perms "$(echo ~root)"
for user in $(find /home -maxdepth 1 -type d ! -name 'home'); do
    check_perms "$user"
done

# vim: syntax=sh ts=4 sw=4 sts=4 et sr cc=78 tw=78
