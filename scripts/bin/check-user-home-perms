#!/usr/bin/env bash

# Check for potentially incorrect file or group ownership within each user's
# home directory. This can happen quite easily when using sudo to perform
# configuration of a package which will be running under a particular user
# account. Note that an account being flagged by this function does *not*
# guarantee an issue, just that there *may* be one which should be verified.

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# DESC: Check permissions on a user's home directory
# ARGS: $1 (required): User name to check
function check_user_home_perms() {
    if [[ $# -ne 1 ]]; then
        script_exit 'Invalid arguments passed to check_user_home_perms()!' 2
    fi

    local user_name user_entry
    user_name="$1"
    user_entry="$(getent passwd "$user_name" || true)"
    if [[ -z $user_entry ]]; then
        script_exit "Unable to find details for user: $user_name"
    fi

    local user_uid user_gid user_home
    user_uid="$(id -u "$user_name")"
    user_gid="$(id -g "$user_name")"
    user_home="$(echo "$user_entry" | cut -d: -f6)"

    pretty_print "Checking permissions for $user_name ... " "$fg_green" 'true'
    local find_results find_status
    # TODO: The Vim undo files exclusion is a massive hack ...
    find_results="$(run_as_root find "$user_home" \
                        -not -path '*/.vim/undo/*' \
                     \( -not -uid "$user_uid" -or \
                        -not -gid "$user_gid" \) 2>&1)"
    find_status=$?

    if [[ $find_status -eq 0 && -z $find_results ]]; then
        pretty_print 'OK'
    elif [[ $find_status -ne 0 ]]; then
        pretty_print 'find returned non-zero exit status!' "$fg_yellow"
    else
        pretty_print 'found potential issues:' "$fg_red"
        pretty_print "$find_results"
    fi
}


# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
function main() {
    # shellcheck source=scripts/bin/bash-template.sh
    source "$(dirname "${BASH_SOURCE[0]}")/bash-template.sh"

    trap "script_trap_err" ERR
    trap "script_trap_exit" EXIT

    script_init
    colour_init

    # shellcheck disable=SC2119
    if ! check_superuser; then
        script_exit 'Superuser access (via root or sudo) is required.' 1
    fi

    # shellcheck disable=SC2034
    getent passwd | while IFS=: read -r login pw uid gid gecos home shell; do
        if [[ $home =~ ^(/root|/home/[A-Za-z]) ]]; then
            if [[ -d $home ]]; then
                check_user_home_perms "$login"
            fi
        fi
    done
}


# Check user home directory permissions
main "$@"

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
