#!/usr/bin/env bash

# Quick script to handle updating our dotfiles

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
#set -o nounset         # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

DOT_MANAGE=dot-manage

function script_init() {
    # Original directory
    orig_dir="$PWD"

    # Figure out the physical directory this script resides in. The approach
    # taken is clumsy as the simple methods like "readlink -f" and "realpath"
    # are not platform independent. We have to work on Linux, BSD, OS X, etc...
    script_file="$(perl -MCwd -le 'print Cwd::abs_path(shift)' "${BASH_SOURCE[0]}")"
    script_dir="$(dirname "$script_file")"

    # Dotfiles directory path
    dotfiles_dir="$(cd -P "$script_dir"; git rev-parse --show-toplevel)"
}


function script_usage() {
    echo 'Usage:
    -h|--help                   Displays this help

    Update Options:
    -a|--all                    Update all the things!!
    -g|--git                    Update Git sources & any submodules (default)
    -s|--stow                   Run dot-manage after updating Git (default)
    -v|--vim                    Update Vim bundles'
}


function parse_params() {
    if [[ $# -eq 0 ]]; then
        git_update=true
        stow_update=true
    else
        while [[ $# -gt 0 ]]; do
            param="$1"
            shift
            case $param in
                -h|--help)
                    script_usage
                    exit 0
                    ;;
                -a|--all)
                    git_update=true
                    stow_update=true
                    vim_update=true
                    ;;
                -g|--git)
                    git_update=true
                    ;;
                -s|--stow)
                    stow_update=true
                    ;;
                -v|--vim)
                    vim_update=true
                    ;;
                *)
                    echo "Invalid parameter was provided: $param"
                    exit 1
            esac
        done
    fi
}


script_init
parse_params "$@"

if [[ -n $git_update ]]; then
    echo '*** Updating Git sources...'
    cd "$dotfiles_dir"

    # Default to the upstream branches for an unqualified merge
    git config merge.defaultToUpstream true

    git fetch
    git merge --ff-only
    git submodule init
    git submodule update
fi

if [[ -n $stow_update ]]; then
    cd "$dotfiles_dir"
    ./$DOT_MANAGE
fi

if [[ -n $vim_update ]]; then
    echo '*** Updating Vim bundles...'
    vim +PluginUpdate +qall
fi

cd "$orig_dir"

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
